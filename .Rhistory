# 2) 给 Plotly 用的数据框（原值 vs 对数）
teu_df <- la_teu_win %>%
select(Date = date, TEUs, log_TEUs)
# 3) （可选）用 plotly 画“原始 vs 对数”对比
# library(plotly)
# plot_ly(teu_df, x = ~Date) %>%
#   add_lines(y = ~TEUs, name = 'Original TEUs', line = list(color = 'blue')) %>%
#   add_lines(y = ~log_TEUs, name = 'Log-Transformed TEUs', line = list(color = 'red')) %>%
#   layout(title = "Original vs Log-Transformed Port of LA Monthly TEUs (2000–2024)",
#          xaxis = list(title = "Year"),
#          yaxis = list(title = "Value")
win_start <- as.Date("2000-01-01")
win_end   <- as.Date("2024-12-01")
la_teu_win <- la_teu_full %>%
filter(date >= win_start, date <= win_end) %>%
mutate(
TEUs = as.numeric(Total_TEUs),
# 防止极端情况下出现 0 或缺失导致 log 报错
log_TEUs = ifelse(TEUs > 0, log(TEUs), NA_real_)
)
# 2) 给 Plotly 用的数据框（原值 vs 对数）
teu_df <- la_teu_win %>%
select(Date = date, TEUs, log_TEUs)
#（可选）用 plotly 画“原始 vs 对数”对比
library(plotly)
plot_ly(teu_df, x = ~Date) %>%
add_lines(y = ~TEUs, name = 'Original TEUs', line = list(color = 'blue')) %>%
add_lines(y = ~log_TEUs, name = 'Log-Transformed TEUs', line = list(color = 'red')) %>%
layout(title = "Original vs Log-Transformed Port of LA Monthly TEUs (2000–2024)",
xaxis = list(title = "Year"),
yaxis = list(title = "Value")
win_start <- as.Date("2000-01-01")
win_end   <- as.Date("2024-12-01")
la_teu_win <- la_teu_full %>%
filter(date >= win_start, date <= win_end) %>%
mutate(
TEUs = as.numeric(Total_TEUs),
# 防止极端情况下出现 0 或缺失导致 log 报错
log_TEUs = ifelse(TEUs > 0, log(TEUs), NA_real_)
)
# 2) 给 Plotly 用的数据框（原值 vs 对数）
teu_df <- la_teu_win %>%
select(Date = date, TEUs, log_TEUs)
#（可选）用 plotly 画“原始 vs 对数”对比
library(plotly)
plot_ly(teu_df, x = ~Date) %>%
add_lines(y = ~TEUs, name = 'Original TEUs', line = list(color = 'blue')) %>%
add_lines(y = ~log_TEUs, name = 'Log-Transformed TEUs', line = list(color = 'red')) %>%
layout(title = "Original vs Log-Transformed Port of LA Monthly TEUs (2000–2024)",
xaxis = list(title = "Year"),
yaxis = list(title = "Value")
win_start <- as.Date("2000-01-01")
win_end   <- as.Date("2024-12-01")
la_teu_win <- la_teu_full %>%
filter(date >= win_start, date <= win_end) %>%
mutate(
TEUs = as.numeric(Total_TEUs),
# 防止极端情况下出现 0 或缺失导致 log 报错
log_TEUs = ifelse(TEUs > 0, log(TEUs), NA_real_)
)
# 2) 给 Plotly 用的数据框（原值 vs 对数）
teu_df <- la_teu_win %>%
select(Date = date, TEUs, log_TEUs)
# ---- 用 Plotly 画“原始 vs 对数”对比 ----
library(plotly)
plot_ly(teu_df, x = ~Date) %>%
add_lines(
y = ~TEUs,
name = "Original TEUs",
line = list(color = "blue")
) %>%
add_lines(
y = ~log_TEUs,
name = "Log-Transformed TEUs",
line = list(color = "red")
) %>%
layout(
title = "Original vs Log-Transformed Port of LA Monthly TEUs (2000–2024)",
xaxis = list(title = "Year"),
yaxis = list(title = "Value")
)
win_start <- as.Date("2000-01-01")
win_end   <- as.Date("2024-12-01")
la_teu_win <- la_teu_full %>%
filter(date >= win_start, date <= win_end) %>%
mutate(
TEUs = as.numeric(Total_TEUs),
# 防止极端情况下出现 0 或缺失导致 log 报错
log_TEUs = ifelse(TEUs > 0, log(TEUs), NA_real_)
)
# 2) 给 Plotly 用的数据框（原值 vs 对数）
teu_df <- la_teu_win %>%
select(Date = date, TEUs, log_TEUs)
# ---- 用 Plotly 画“原始 vs 对数”对比 ----
library(plotly)
plot_ly(teu_df, x = ~Date) %>%
add_lines(
y = ~TEUs,
name = "Original TEUs",
line = list(color = "blue")
) %>%
add_lines(
y = ~log_TEUs,
name = "Log-Transformed TEUs",
line = list(color = "red")
) %>%
layout(
title = "Original vs Log-Transformed Port of LA Monthly TEUs (2000–2024)",
xaxis = list(title = "Year"),
yaxis = list(title = "Value")
)
# ---- 用 Plotly 画“原始 vs 对数”对比 ----
library(ggplot2)
# 加一个小常数，避免 log(0)
teu_df$log_TEUs <- log(teu_df$TEUs + 1)
ggplot(teu_df, aes(x = Date)) +
geom_line(aes(y = TEUs, color = "Original TEUs")) +
geom_line(aes(y = log_TEUs, color = "Log-Transformed TEUs")) +
scale_color_manual(values = c("Original TEUs" = "blue", "Log-Transformed TEUs" = "red")) +
labs(
title = "Original vs Log-Transformed Port of LA Monthly TEUs (2000–2024)",
x = "Year",
y = "Value",
color = "Series"
) +
theme_minimal(base_size = 12)
summary(teu_df$TEUs)
sum(teu_df$TEUs == 0, na.rm = TRUE)
teu_df$log_TEUs <- log(teu_df$TEUs + 1)   # 避免 log(0)
ggplot(teu_df, aes(x = Date)) +
geom_line(aes(y = TEUs, color = "Original TEUs")) +
geom_line(aes(y = log_TEUs * 200000, color = "Log-Transformed TEUs")) +  # 放大以便可见
scale_color_manual(values = c("Original TEUs" = "blue", "Log-Transformed TEUs" = "red")) +
labs(
title = "Original vs Log-Transformed Port of LA Monthly TEUs (2000–2024)",
x = "Year",
y = "Value",
color = "Series"
) +
theme_minimal(base_size = 12)
library(ggplot2)
# 安全取对数
teu_df$log_TEUs <- log(teu_df$TEUs + 1)
# 让两条线在平均水平处对齐的缩放系数
scale_fac <- mean(teu_df$TEUs, na.rm = TRUE) / mean(teu_df$log_TEUs, na.rm = TRUE)
ggplot(teu_df, aes(x = Date)) +
geom_line(aes(y = TEUs, color = "Original TEUs"), linewidth = 0.6) +
geom_line(aes(y = log_TEUs * scale_fac, color = "log(TEUs+1)"), linewidth = 0.6) +
scale_color_manual(values = c("Original TEUs" = "blue", "log(TEUs+1)" = "red"), name = "Series") +
scale_y_continuous(
name = "TEUs",
labels = scales::comma,
sec.axis = sec_axis(~ . / scale_fac, name = "log(TEUs + 1)")
) +
labs(title = "Original vs Log-Transformed Port of LA Monthly TEUs (2000–2024)",
x = "Year") +
theme_minimal(base_size = 12) +
theme(legend.position = "right")
library(tidyr)
plot_df <- teu_df |>
mutate(`Original TEUs` = TEUs, `log(TEUs+1)` = log(TEUs + 1)) |>
select(Date, `Original TEUs`, `log(TEUs+1)`) |>
pivot_longer(-Date, names_to = "Series", values_to = "Value")
ggplot(plot_df, aes(Date, Value)) +
geom_line() +
facet_wrap(~ Series, ncol = 1, scales = "free_y") +
labs(title = "Original vs Log-Transformed TEUs (2000–2024)",
x = "Year", y = "Value") +
theme_minimal(base_size = 12)
theme(legend.position = "right")
win_start <- as.Date("2000-01-01")
win_end   <- as.Date("2024-12-01")
la_teu_win <- la_teu_full %>%
filter(date >= win_start, date <= win_end) %>%
mutate(
TEUs = as.numeric(Total_TEUs),
# 防止极端情况下出现 0 或缺失导致 log 报错
log_TEUs = ifelse(TEUs > 0, log(TEUs), NA_real_)
)
# 2) 给 Plotly 用的数据框（原值 vs 对数）
teu_df <- la_teu_win %>%
select(Date = date, TEUs, log_TEUs)
library(tidyr)
plot_df <- teu_df |>
mutate(`Original TEUs` = TEUs, `log(TEUs+1)` = log(TEUs + 1)) |>
select(Date, `Original TEUs`, `log(TEUs+1)`) |>
pivot_longer(-Date, names_to = "Series", values_to = "Value")
ggplot(plot_df, aes(Date, Value)) +
geom_line() +
facet_wrap(~ Series, ncol = 1, scales = "free_y") +
labs(title = "Original vs Log-Transformed TEUs (2000–2024)",
x = "Year", y = "Value") +
theme_minimal(base_size = 12)
theme(legend.position = "right")
library(tidyr)
library(ggplot2)
plot_df <- teu_df |>
mutate(`Original TEUs` = TEUs, `log(TEUs+1)` = log(TEUs + 1)) |>
select(Date, `Original TEUs`, `log(TEUs+1)`) |>
pivot_longer(-Date, names_to = "Series", values_to = "Value")
ggplot(plot_df, aes(Date, Value)) +
geom_line() +
facet_wrap(~ Series, ncol = 1, scales = "free_y") +
labs(title = "Original vs Log-Transformed TEUs (2000–2024)",
x = "Year", y = "Value") +
theme_minimal(base_size = 12)
theme(legend.position = "right")
library(tidyr)
library(ggplot2)
plot_df <- teu_df |>
mutate(`Original TEUs` = TEUs, `log(TEUs+1)` = log(TEUs + 1)) |>
select(Date, `Original TEUs`, `log(TEUs+1)`) |>
pivot_longer(-Date, names_to = "Series", values_to = "Value")
ggplot(plot_df, aes(Date, Value)) +
geom_line() +
facet_wrap(~ Series, ncol = 1, scales = "free_y") +
labs(title = "Original vs Log-Transformed TEUs (2000–2024)",
x = "Year", y = "Value") +
theme_minimal(base_size = 12)
library(tidyr)
library(ggplot2)
plot_df <- teu_df |>
mutate(`Original TEUs` = TEUs, `log(TEUs+1)` = log(TEUs + 1)) |>
select(Date, `Original TEUs`, `log(TEUs+1)`) |>
pivot_longer(-Date, names_to = "Series", values_to = "Value")
ggplot(plot_df, aes(Date, Value)) +
geom_line() +
facet_wrap(~ Series, ncol = 1, scales = "free_y") +
labs(title = "Original vs Log-Transformed TEUs (2000–2024)",
x = "Year", y = "Value") +
theme_minimal(base_size = 12)+
theme(legend.position = "right")
library(tidyr)
library(ggplot2)
win_start <- as.Date("2000-01-01")
win_end   <- as.Date("2024-12-01")
la_teu_win <- la_teu_full %>%
filter(date >= win_start, date <= win_end) %>%
mutate(
TEUs = as.numeric(Total_TEUs),
log_TEUs = ifelse(TEUs > 0, log(TEUs), NA_real_)
)
teu_df <- la_teu_win %>%
select(Date = date, TEUs, log_TEUs)
plot_df <- teu_df |>
mutate(`Original TEUs` = TEUs, `log(TEUs+1)` = log(TEUs + 1)) |>
select(Date, `Original TEUs`, `log(TEUs+1)`) |>
pivot_longer(-Date, names_to = "Series", values_to = "Value")
ggplot(plot_df, aes(Date, Value)) +
geom_line() +
facet_wrap(~ Series, ncol = 1, scales = "free_y") +
labs(title = "Original vs Log-Transformed TEUs (2000–2024)",
x = "Year", y = "Value") +
theme_minimal(base_size = 12)+
theme(legend.position = "right")
library(forecast)
library(ggplot2)
library(scales)
gglagplot(teu_m, lags = 9, do.lines = FALSE) +
labs(title = "Lag Plots (1–9) — monthly TEUs (2000–2024)",
x = "Lagged TEUs", y = "Current TEUs") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_x_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1)
)
gglagplot(teu_m, lags = 9, do.lines = FALSE) +
labs(title = "Lag Plots (1–9) — TEUs (2000–2024)",
x = "Lagged TEUs", y = "Current TEUs") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_x_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),   # x 轴刻度旋转
axis.text.y = element_text(angle = 0, hjust = 1)     # y 轴保持水平
)
library(forecast)
library(ggplot2)
library(scales)
# 1) 对数处理（避免 log(0)）
offset <- 1  # 如果确认没有 0，可设为 0
teu_m_log <- log(teu_m + offset)
# 2) 画 log 后的 Lag 图
gglagplot(teu_m_log, lags = 9, do.lines = FALSE) +
labs(
title = "Lag Plots (1–9) — log(TEUs) monthly (2000–2024)",
x = "Lagged log(TEUs)",
y = "Current log(TEUs)"
) +
# log 值不再用百万 M 的格式，因此不做 number-scaling
scale_x_continuous(breaks = pretty_breaks(5)) +
scale_y_continuous(breaks = pretty_breaks(5)) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(hjust = 1)
)
library(forecast)
library(ggplot2)
library(scales)
gglagplot(teu_m, lags = 9, do.lines = FALSE) +
labs(title = "Lag Plots (1–9) — TEUs (2000–2024)",
x = "Lagged TEUs", y = "Current TEUs") +
scale_y_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
scale_x_continuous(labels = label_number(scale = 1e-6, suffix = "M")) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),   # x 轴刻度旋转
axis.text.y = element_text(angle = 0, hjust = 1)     # y 轴保持水平
)
library(forecast)
library(ggplot2)
teu_log <- log(teu_m)
# decompose log(TEUs)
autoplot(decompose(teu_log)) +
ggtitle("Decomposition of Log-Transformed Port of LA Monthly TEUs (2000–2024)") +
xlab("Year") +
ylab("Value")
library(forecast)
library(ggplot2)
library(gridExtra)
# 原始对数序列
teu_log <- log(teu_m)
# 一阶差分
teu_log_diff1 <- diff(teu_log, differences = 1)
# 定义函数：生成 ACF 和 PACF 图
plot_acf_pacf <- function(ts_data, title_prefix) {
p1 <- autoplot(acf(ts_data, plot = FALSE)) +
ggtitle(paste(title_prefix, "- ACF"))
p2 <- autoplot(pacf(ts_data, plot = FALSE)) +
ggtitle(paste(title_prefix, "- PACF"))
grid.arrange(p1, p2, ncol = 2)
}
# 1. 原始对数序列
plot_acf_pacf(teu_log, "Log(TEUs)")
library(forecast)
library(ggplot2)
library(gridExtra)
library(dplyr)
# 原始对数序列
teu_log <- log(teu_m)
# 一阶差分
teu_log_diff1 <- diff(teu_log, differences = 1)
# 定义函数：生成 ACF 和 PACF 图
plot_acf_pacf <- function(ts_data, title_prefix) {
p1 <- autoplot(acf(ts_data, plot = FALSE)) +
ggtitle(paste(title_prefix, "- ACF"))
p2 <- autoplot(pacf(ts_data, plot = FALSE)) +
ggtitle(paste(title_prefix, "- PACF"))
grid.arrange(p1, p2, ncol = 2)
}
# 1. 原始对数序列
plot_acf_pacf(teu_log, "Log(TEUs)")
library(forecast)
library(ggplot2)
library(gridExtra)
library(dplyr)
# 原始对数序列
teu_log <- log(teu_m)
# 一阶差分
teu_log_diff1 <- diff(teu_log, differences = 1)
# 定义函数：生成 ACF 和 PACF 图
plot_acf_pacf <- function(ts_data, title_prefix) {
p1 <- autoplot(acf(ts_data, plot = FALSE)) +
ggtitle(paste(title_prefix, "- ACF"))
p2 <- autoplot(pacf(ts_data, plot = FALSE)) +
ggtitle(paste(title_prefix, "- PACF"))
grid.arrange(p1, p2, ncol = 2)
}
# 1. 原始对数序列
plot_acf_pacf(teu_log, "Log(TEUs)")
# 2. 一阶差分
plot_acf_pacf(teu_log_diff1, "Diff-1 Log(TEUs)")
library(forecast)
library(ggplot2)
# use log data
teu_log <- log(teu_m)
# ACF
ggAcf(teu_log) +
ggtitle("ACF of Log(TEUs)") +
theme_minimal()
# PACF
ggPacf(teu_log) +
ggtitle("PACF of Log(TEUs)") +
theme_minimal()
library(urca)
# ADF test
adf_test <- ur.df(teu_log, type = "trend", lags = 12)
summary(adf_test)
library(urca)
tseries::adf.test(teu_log)
# ADF test
#adf_test <- ur.df(teu_log, type = "trend", lags = 12)
#summary(adf_test)
library(urca)
tseries::adf.test(teu_log)
tseries::adf.test(teu_m)
# ADF test
#adf_test <- ur.df(teu_log, type = "trend", lags = 12)
#summary(adf_test)
library(urca)
tseries::adf.test(teu_log)
library(forecast)
library(ggplot2)
library(gridExtra)
# 原始 log 数据
teu_log <- log(teu_m)
# 一阶差分
teu_diff1 <- diff(teu_log, differences = 1)
# 季节差分 (lag = 12)
teu_diff_seasonal <- diff(teu_log, lag = 12)
# 一阶差分 + 季节差分
teu_diff_both <- diff(teu_diff1, lag = 12)
# 画图对比
p1 <- autoplot(teu_log) + ggtitle("Log(TEUs)")
p2 <- autoplot(teu_diff1) + ggtitle("1st Difference of Log(TEUs)")
p3 <- autoplot(teu_diff_seasonal) + ggtitle("Seasonal Difference (lag=12)")
p4 <- autoplot(teu_diff_both) + ggtitle("1st + Seasonal Difference")
grid.arrange(p1, p2, p3, p4, ncol=2)
library(forecast)
library(ggplot2)
library(gridExtra)
teu_log <- log(teu_m)
teu_diff1 <- diff(teu_log, differences = 1)
teu_diff_seasonal <- diff(teu_log, lag = 12)
p1 <- autoplot(teu_log) + ggtitle("Log(TEUs)")
p2 <- autoplot(teu_diff1) + ggtitle("1st Difference of Log(TEUs)")
p3 <- autoplot(teu_diff_seasonal) + ggtitle("Seasonal Difference (lag=12)")
grid.arrange(p1, p2, p3, ncol=2)
library(forecast)
library(ggplot2)
library(gridExtra)
teu_log <- log(teu_m)
teu_diff1 <- diff(teu_log, differences = 1)
teu_diff_seasonal <- diff(teu_log, lag = 12)
p1 <- autoplot(teu_log) + ggtitle("Log(TEUs)")
p2 <- autoplot(teu_diff1) + ggtitle("1st Difference of Log(TEUs)")
p3 <- autoplot(teu_diff_seasonal) + ggtitle("Seasonal Difference (lag=12)")
grid.arrange(p1, p2, p3, ncol=1)
library(forecast)
library(ggplot2)
library(gridExtra)
teu_log <- log(teu_m)
teu_diff1 <- diff(teu_log, differences = 1)
teu_diff2 <- diff(teu_log, differences = 2)
p1 <- autoplot(teu_log) + ggtitle("Log(TEUs)")
p2 <- autoplot(teu_diff1) + ggtitle("1st Difference of Log(TEUs)")
p3 <- autoplot(teu_diff2) + ggtitle("2st Difference of Log(TEUs)")
grid.arrange(p1, p2, p3, ncol=1)
library(forecast)
library(ggplot2)
library(gridExtra)
teu_log <- log(teu_m)
teu_diff1 <- diff(teu_log, differences = 1)
p1 <- autoplot(teu_log) + ggtitle("Log(TEUs)")
p2 <- autoplot(teu_diff1) + ggtitle("1st Difference of Log(TEUs)")
grid.arrange(p1, p2, p3, ncol=1)
library(forecast)
library(ggplot2)
library(gridExtra)
teu_log <- log(teu_m)
teu_diff1 <- diff(teu_log, differences = 1)
p1 <- autoplot(teu_log) + ggtitle("Log(TEUs)")
p2 <- autoplot(teu_diff1) + ggtitle("1st Difference of Log(TEUs)")
grid.arrange(p1, p2, ncol=1)
# 1st difference of ACF
acf_plot <- ggAcf(teu_diff1, lag.max = 36) +
ggtitle("ACF of 1st Difference of Log(TEUs)") +
theme_minimal()
# 1st difference of PACF
pacf_plot <- ggPacf(teu_diff1, lag.max = 36) +
ggtitle("PACF of 1st Difference of Log(TEUs)") +
theme_minimal()
grid.arrange(acf_plot, pacf_plot, ncol = 2)
# 1st difference of ACF
acf_plot <- ggAcf(teu_diff1, lag.max = 36) +
ggtitle("ACF of 1st Difference of Log(TEUs)") +
theme_minimal()
# 1st difference of PACF
pacf_plot <- ggPacf(teu_diff1, lag.max = 36) +
ggtitle("PACF of 1st Difference of Log(TEUs)") +
theme_minimal()
grid.arrange(acf_plot, pacf_plot, ncol = 2)
tseries::adf.test(teu_diff1)
library(forecast)
library(ggplot2)
# 若还没做：
# teu_log <- log(teu_m)
autoplot(teu_log) +
autolayer(ma(teu_log, 3),  series = "MA-3 (Quarterly)") +   # quarter smooth
autolayer(ma(teu_log, 12), series = "MA-12 (Annual)") +     # annual smooth
autolayer(ma(teu_log, 24), series = "MA-24 (2-Year)") +     # 2 year smooth
labs(
title = "Moving Average Smoothing — log(TEUs)",
x = "Time", y = "log(TEUs)"
) +
theme_minimal() +
guides(colour = guide_legend(title = "Series"))
library(forecast)
library(ggplot2)
autoplot(teu_log) +
autolayer(ma(teu_log, 3),  series = "MA-3 (Quarterly)") +   # quarter smooth
autolayer(ma(teu_log, 12), series = "MA-12 (Annual)") +     # annual smooth
autolayer(ma(teu_log, 24), series = "MA-24 (2-Year)") +     # 2 year smooth
labs(
title = "Moving Average Smoothing — log(TEUs)",
x = "Time", y = "log(TEUs)"
) +
theme_minimal() +
guides(colour = guide_legend(title = "Series"))
