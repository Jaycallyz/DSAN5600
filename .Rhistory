df <- teu %>%
left_join(wti,   by = "Date") %>%
left_join(brent, by = "Date") %>%
left_join(usd,   by = "Date") %>%
left_join(rsa,   by = "Date") %>%
left_join(sp500, by = "Date") %>%
left_join(rmb,   by = "Date")
# handle na
df <- df %>%
mutate(
WTI   = zoo::na.locf(WTI,   na.rm = FALSE),
Brent = zoo::na.locf(Brent, na.rm = FALSE),
USD   = zoo::na.locf(USD,   na.rm = FALSE),
RSAFS = zoo::na.locf(RSAFS, na.rm = FALSE),
SP500 = zoo::na.locf(SP500, na.rm = FALSE),
RMB   = zoo::na.locf(RMB,   na.rm = FALSE)
) %>%
filter(Date >= as.Date("2000-01-01"), Date <= as.Date("2024-01-01"))
p <- plot_ly(df, x = ~Date, width = 1200, height = 620) %>%
add_lines(y = ~TEUs, name = "TEUs", yaxis = "y1",
line = list(color = '#3b80c5', width = 2)) %>%
add_lines(y = ~WTI, name = "WTI", yaxis = "y2",
line = list(color = '#a2acbd', width = 1.5)) %>%
layout(
title  = "Port of LA TEUs vs External Drivers",
xaxis  = list(
title = "Date",
automargin = TRUE,
rangeslider = list(visible = FALSE)   # 关闭滑动条
),
yaxis  = list(title = "TEUs",
rangemode = "tozero",
automargin = TRUE,
nticks = 6,
tickformat = ",.0f"),
yaxis2 = list(overlaying = "y",
side       = "right",
automargin = TRUE,
nticks     = 6,
tickformat = ",.0f",
title      = list(text = "External Variable", standoff = 50)),
legend = list(orientation = "h", x = 0.5, y = 1.12, xanchor = "center"),
margin = list(l = 90, r = 150, t = 70, b = 60),
hovermode = "x unified",
updatemenus = list(
list(
type = "dropdown",
x = 0.06, y = 1.16,
buttons = list(
list(method = "restyle",
args = list(list(y = list(df$TEUs, df$WTI),
name = list("TEUs", "WTI"))),
label = "WTI"),
list(method = "restyle",
args = list(list(y = list(df$TEUs, df$Brent),
name = list("TEUs", "Brent"))),
label = "Brent"),
list(method = "restyle",
args = list(list(y = list(df$TEUs, df$USD),
name = list("TEUs", "USD Index"))),
label = "USD Index"),
list(method = "restyle",
args = list(list(y = list(df$TEUs, df$RMB),
name = list("TEUs", "RMB/USD"))),
label = "RMB/USD"),
list(method = "restyle",
args = list(list(y = list(df$TEUs, df$RSAFS),
name = list("TEUs", "Retail Sales"))),
label = "Retail Sales"),
list(method = "restyle",
args = list(list(y = list(df$TEUs, df$SP500),
name = list("TEUs", "S&P 500"))),
label = "S&P 500")
)
)
)
)
p
library(plotly)
library(readr)
library(dplyr)
library(tidyverse)
library(zoo)
library(lubridate)
teu <- read_csv("data-raw/la_teu_data.csv", show_col_types = FALSE) %>%
mutate(
ym   = zoo::as.yearmon(Date, "%b-%y"),
Date = as.Date(ym)
) %>%
select(Date, TEUs = Total_TEUs)
wti <- read_csv("data-raw/WTI.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, WTI = WTISPLC)
brent <- read_csv("data-raw/brent.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, Brent = MCOILBRENTEU)
usd <- read_csv("data-raw/usd.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, USD = DTWEXBGS)
rsa <- read_csv("data-raw/RSAFS.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RSAFS = RSAFS)
sp500 <- read_csv("data-raw/SP500.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, SP500 = SP500)
rmb <- read_csv("data-raw/rmb.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RMB = DEXCHUS)
df <- teu %>%
left_join(wti,   by = "Date") %>%
left_join(brent, by = "Date") %>%
left_join(usd,   by = "Date") %>%
left_join(rsa,   by = "Date") %>%
left_join(sp500, by = "Date") %>%
left_join(rmb,   by = "Date")
# handle na
df <- df %>%
mutate(
WTI   = zoo::na.locf(WTI,   na.rm = FALSE),
Brent = zoo::na.locf(Brent, na.rm = FALSE),
USD   = zoo::na.locf(USD,   na.rm = FALSE),
RSAFS = zoo::na.locf(RSAFS, na.rm = FALSE),
SP500 = zoo::na.locf(SP500, na.rm = FALSE),
RMB   = zoo::na.locf(RMB,   na.rm = FALSE)
) %>%
filter(Date >= as.Date("2000-01-01"), Date <= as.Date("2024-01-01"))
p <- plot_ly(df, x = ~Date) %>%                 # 不要写固定 width/height
add_lines(y = ~TEUs, name = "TEUs", yaxis = "y1",
line = list(color = '#3b80c5', width = 2)) %>%
add_lines(y = ~WTI,  name = "WTI",  yaxis = "y2",
line = list(color = '#a2acbd', width = 1.5)) %>%
layout(
title = "Port of LA TEUs vs External Drivers",
xaxis = list(
title = "Date",
automargin = TRUE,
rangeslider = list(visible = FALSE),  # ✅ 关闭 plotly 的滑动条
fixedrange  = FALSE                   # 允许缩放但不显示滑条
),
yaxis  = list(title = "TEUs", rangemode = "tozero", automargin = TRUE,
nticks = 6, tickformat = ",.0f"),
yaxis2 = list(overlaying = "y", side = "right", automargin = TRUE,
nticks = 6, tickformat = ",.0f",
title = list(text = "External Variable", standoff = 50)),
legend = list(orientation = "h", x = 0.5, y = 1.12, xanchor = "center"),
margin = list(l = 90, r = 150, t = 70, b = 60),
autosize = TRUE                        # ✅ 让画布随容器自适应
) %>%
config(responsive = TRUE, scrollZoom = TRUE, displaylogo = FALSE)  # ✅ 避免超宽滚动条
p
library(plotly)
library(readr)
library(dplyr)
library(tidyverse)
library(zoo)
library(lubridate)
teu <- read_csv("data-raw/la_teu_data.csv", show_col_types = FALSE) %>%
mutate(
ym   = zoo::as.yearmon(Date, "%b-%y"),
Date = as.Date(ym)
) %>%
select(Date, TEUs = Total_TEUs)
wti <- read_csv("data-raw/WTI.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, WTI = WTISPLC)
brent <- read_csv("data-raw/brent.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, Brent = MCOILBRENTEU)
usd <- read_csv("data-raw/usd.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, USD = DTWEXBGS)
rsa <- read_csv("data-raw/RSAFS.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RSAFS = RSAFS)
sp500 <- read_csv("data-raw/SP500.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, SP500 = SP500)
rmb <- read_csv("data-raw/rmb.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RMB = DEXCHUS)
df <- teu %>%
left_join(wti,   by = "Date") %>%
left_join(brent, by = "Date") %>%
left_join(usd,   by = "Date") %>%
left_join(rsa,   by = "Date") %>%
left_join(sp500, by = "Date") %>%
left_join(rmb,   by = "Date")
# handle na
df <- df %>%
mutate(
WTI   = zoo::na.locf(WTI,   na.rm = FALSE),
Brent = zoo::na.locf(Brent, na.rm = FALSE),
USD   = zoo::na.locf(USD,   na.rm = FALSE),
RSAFS = zoo::na.locf(RSAFS, na.rm = FALSE),
SP500 = zoo::na.locf(SP500, na.rm = FALSE),
RMB   = zoo::na.locf(RMB,   na.rm = FALSE)
) %>%
filter(Date >= as.Date("2000-01-01"), Date <= as.Date("2024-01-01"))
p <- plot_ly(df, x = ~Date) %>%
# Trace 0：左轴 TEUs（始终存在）
add_lines(y = ~TEUs, name = "TEUs", yaxis = "y1",
line = list(color = '#3b80c5', width = 2)) %>%
# Trace 1：右轴外部变量（默认 WTI）
add_lines(y = ~WTI,  name = "WTI",  yaxis = "y2",
line = list(color = '#a2acbd', width = 1.5)) %>%
layout(
title  = "Port of LA TEUs vs External Drivers",
xaxis  = list(
title = "Date",
automargin = TRUE,
rangeslider = list(visible = FALSE),   # 关闭底部滑动条
fixedrange  = FALSE
),
yaxis  = list(
title = "TEUs",
rangemode = "tozero",
automargin = TRUE,
nticks = 6,
tickformat = ",.0f"
),
yaxis2 = list(
overlaying = "y",
side       = "right",
automargin = TRUE,
nticks     = 6,
tickformat = ",.0f",
title      = list(text = "External Variable", standoff = 50)
# 若你的 plotly 版本不支持上面这行，可改为：
# title = "External Variable", title_standoff = 50
),
legend = list(orientation = "h", x = 0.5, y = 1.12, xanchor = "center"),
margin = list(l = 90, r = 150, t = 70, b = 60),
hovermode = "x unified",
autosize  = TRUE
) %>%
config(responsive = TRUE, scrollZoom = TRUE, displaylogo = FALSE) %>%
layout(
updatemenus = list(
list(
type = "dropdown",
x = 0.06, y = 1.16,
buttons = list(
list(method = "restyle",
args = list(list(y = list(df$WTI),   name = "WTI"),        list(1)),
label = "WTI"),
list(method = "restyle",
args = list(list(y = list(df$Brent), name = "Brent"),      list(1)),
label = "Brent"),
list(method = "restyle",
args = list(list(y = list(df$USD),   name = "USD Index"),  list(1)),
label = "USD Index"),
list(method = "restyle",
args = list(list(y = list(df$RMB),   name = "RMB/USD"),    list(1)),
label = "RMB/USD"),
list(method = "restyle",
args = list(list(y = list(df$RSAFS), name = "Retail Sales"), list(1)),
label = "Retail Sales"),
list(method = "restyle",
args = list(list(y = list(df$SP500), name = "S&P 500"),    list(1)),
label = "S&P 500")
)
)
)
)
p
library(plotly)
library(readr)
library(dplyr)
library(tidyverse)
library(zoo)
library(lubridate)
teu <- read_csv("data-raw/la_teu_data.csv", show_col_types = FALSE) %>%
mutate(
ym   = zoo::as.yearmon(Date, "%b-%y"),
Date = as.Date(ym)
) %>%
select(Date, TEUs = Total_TEUs)
wti <- read_csv("data-raw/WTI.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, WTI = WTISPLC)
brent <- read_csv("data-raw/brent.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, Brent = MCOILBRENTEU)
usd <- read_csv("data-raw/usd.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, USD = DTWEXBGS)
rsa <- read_csv("data-raw/RSAFS.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RSAFS = RSAFS)
sp500 <- read_csv("data-raw/SP500.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, SP500 = SP500)
rmb <- read_csv("data-raw/rmb.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RMB = DEXCHUS)
df <- teu %>%
left_join(wti,   by = "Date") %>%
left_join(brent, by = "Date") %>%
left_join(usd,   by = "Date") %>%
left_join(rsa,   by = "Date") %>%
left_join(sp500, by = "Date") %>%
left_join(rmb,   by = "Date")
# handle na
df <- df %>%
mutate(
WTI   = zoo::na.locf(WTI,   na.rm = FALSE),
Brent = zoo::na.locf(Brent, na.rm = FALSE),
USD   = zoo::na.locf(USD,   na.rm = FALSE),
RSAFS = zoo::na.locf(RSAFS, na.rm = FALSE),
SP500 = zoo::na.locf(SP500, na.rm = FALSE),
RMB   = zoo::na.locf(RMB,   na.rm = FALSE)
) %>%
filter(Date >= as.Date("2000-01-01"), Date <= as.Date("2024-01-01"))
p <- plot_ly(df, x = ~Date) %>%
# Trace 0：左轴 TEUs（始终存在）
add_lines(y = ~TEUs, name = "TEUs", yaxis = "y1",
line = list(color = '#3b80c5', width = 2)) %>%
# Trace 1：右轴外部变量（默认 WTI）
add_lines(y = ~WTI,  name = "WTI",  yaxis = "y2",
line = list(color = '#a2acbd', width = 1.5)) %>%
layout(
title  = "Port of LA TEUs vs External Drivers",
xaxis  = list(
title = "Date",
automargin = TRUE,
rangeslider = list(visible = FALSE),   # 关闭底部滑动条
fixedrange  = FALSE
),
yaxis  = list(
title = "TEUs",
rangemode = "tozero",
automargin = TRUE,
nticks = 6,
tickformat = ",.0f"
),
yaxis2 = list(
overlaying = "y",
side       = "right",
automargin = TRUE,
nticks     = 6,
tickformat = ",.0f",
title      = list(text = "External Variable", standoff = 50)
# 若你的 plotly 版本不支持上面这行，可改为：
# title = "External Variable", title_standoff = 50
),
legend = list(orientation = "h", x = 0.5, y = 1.117, xanchor = "center"),
margin = list(l = 90, r = 150, t = 70, b = 60),
hovermode = "x unified",
autosize  = TRUE
) %>%
config(responsive = TRUE, scrollZoom = TRUE, displaylogo = FALSE) %>%
layout(
updatemenus = list(
list(
type = "dropdown",
x = 0.06, y = 1.16,
buttons = list(
list(method = "restyle",
args = list(list(y = list(df$WTI),   name = "WTI"),        list(1)),
label = "WTI"),
list(method = "restyle",
args = list(list(y = list(df$Brent), name = "Brent"),      list(1)),
label = "Brent"),
list(method = "restyle",
args = list(list(y = list(df$USD),   name = "USD Index"),  list(1)),
label = "USD Index"),
list(method = "restyle",
args = list(list(y = list(df$RMB),   name = "RMB/USD"),    list(1)),
label = "RMB/USD"),
list(method = "restyle",
args = list(list(y = list(df$RSAFS), name = "Retail Sales"), list(1)),
label = "Retail Sales"),
list(method = "restyle",
args = list(list(y = list(df$SP500), name = "S&P 500"),    list(1)),
label = "S&P 500")
)
)
)
)
p
library(plotly)
library(readr)
library(dplyr)
library(tidyverse)
library(zoo)
library(lubridate)
teu <- read_csv("data-raw/la_teu_data.csv", show_col_types = FALSE) %>%
mutate(
ym   = zoo::as.yearmon(Date, "%b-%y"),
Date = as.Date(ym)
) %>%
select(Date, TEUs = Total_TEUs)
wti <- read_csv("data-raw/WTI.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, WTI = WTISPLC)
brent <- read_csv("data-raw/brent.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, Brent = MCOILBRENTEU)
usd <- read_csv("data-raw/usd.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, USD = DTWEXBGS)
rsa <- read_csv("data-raw/RSAFS.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RSAFS = RSAFS)
sp500 <- read_csv("data-raw/SP500.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, SP500 = SP500)
rmb <- read_csv("data-raw/rmb.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RMB = DEXCHUS)
df <- teu %>%
left_join(wti,   by = "Date") %>%
left_join(brent, by = "Date") %>%
left_join(usd,   by = "Date") %>%
left_join(rsa,   by = "Date") %>%
left_join(sp500, by = "Date") %>%
left_join(rmb,   by = "Date")
# handle na
df <- df %>%
mutate(
WTI   = zoo::na.locf(WTI,   na.rm = FALSE),
Brent = zoo::na.locf(Brent, na.rm = FALSE),
USD   = zoo::na.locf(USD,   na.rm = FALSE),
RSAFS = zoo::na.locf(RSAFS, na.rm = FALSE),
SP500 = zoo::na.locf(SP500, na.rm = FALSE),
RMB   = zoo::na.locf(RMB,   na.rm = FALSE)
) %>%
filter(Date >= as.Date("2000-01-01"), Date <= as.Date("2024-01-01"))
p <- plot_ly(df, x = ~Date) %>%
add_lines(y = ~TEUs, name = "TEUs", yaxis = "y1",
line = list(color = '#3b80c5', width = 2)) %>%）
library(plotly)
library(readr)
library(dplyr)
library(tidyverse)
library(zoo)
library(lubridate)
teu <- read_csv("data-raw/la_teu_data.csv", show_col_types = FALSE) %>%
mutate(
ym   = zoo::as.yearmon(Date, "%b-%y"),
Date = as.Date(ym)
) %>%
select(Date, TEUs = Total_TEUs)
wti <- read_csv("data-raw/WTI.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, WTI = WTISPLC)
brent <- read_csv("data-raw/brent.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, Brent = MCOILBRENTEU)
usd <- read_csv("data-raw/usd.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, USD = DTWEXBGS)
rsa <- read_csv("data-raw/RSAFS.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RSAFS = RSAFS)
sp500 <- read_csv("data-raw/SP500.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, SP500 = SP500)
rmb <- read_csv("data-raw/rmb.csv", show_col_types = FALSE) %>%
rename(Date = observation_date, RMB = DEXCHUS)
df <- teu %>%
left_join(wti,   by = "Date") %>%
left_join(brent, by = "Date") %>%
left_join(usd,   by = "Date") %>%
left_join(rsa,   by = "Date") %>%
left_join(sp500, by = "Date") %>%
left_join(rmb,   by = "Date")
# handle na
df <- df %>%
mutate(
WTI   = zoo::na.locf(WTI,   na.rm = FALSE),
Brent = zoo::na.locf(Brent, na.rm = FALSE),
USD   = zoo::na.locf(USD,   na.rm = FALSE),
RSAFS = zoo::na.locf(RSAFS, na.rm = FALSE),
SP500 = zoo::na.locf(SP500, na.rm = FALSE),
RMB   = zoo::na.locf(RMB,   na.rm = FALSE)
) %>%
filter(Date >= as.Date("2000-01-01"), Date <= as.Date("2024-01-01"))
p <- plot_ly(df, x = ~Date) %>%
add_lines(y = ~TEUs, name = "TEUs", yaxis = "y1",
line = list(color = '#3b80c5', width = 2)) %>%
add_lines(y = ~WTI,  name = "WTI",  yaxis = "y2",
line = list(color = '#a2acbd', width = 1.5)) %>%
layout(
title  = "Port of LA TEUs vs External Drivers",
xaxis  = list(
title = "Date",
automargin = TRUE,
rangeslider = list(visible = FALSE),
fixedrange  = FALSE
),
yaxis  = list(
title = "TEUs",
rangemode = "tozero",
automargin = TRUE,
nticks = 6,
tickformat = ",.0f"
),
yaxis2 = list(
overlaying = "y",
side       = "right",
automargin = TRUE,
nticks     = 6,
tickformat = ",.0f",
title      = list(text = "External Variable", standoff = 50)
),
legend = list(orientation = "h", x = 0.5, y = 1.12, xanchor = "center"),
margin = list(l = 90, r = 150, t = 70, b = 60),
hovermode = "x unified",
autosize  = TRUE
) %>%
config(responsive = TRUE, scrollZoom = TRUE, displaylogo = FALSE) %>%
layout(
updatemenus = list(
list(
type = "dropdown",
x = 0.06, y = 1.16,
buttons = list(
list(method = "restyle",
args = list(list(y = list(df$WTI),   name = "WTI"),        list(1)),
label = "WTI"),
list(method = "restyle",
args = list(list(y = list(df$Brent), name = "Brent"),      list(1)),
label = "Brent"),
list(method = "restyle",
args = list(list(y = list(df$USD),   name = "USD Index"),  list(1)),
label = "USD Index"),
list(method = "restyle",
args = list(list(y = list(df$RMB),   name = "RMB/USD"),    list(1)),
label = "RMB/USD"),
list(method = "restyle",
args = list(list(y = list(df$RSAFS), name = "Retail Sales"), list(1)),
label = "Retail Sales"),
list(method = "restyle",
args = list(list(y = list(df$SP500), name = "S&P 500"),    list(1)),
label = "S&P 500")
)
)
)
)
p
